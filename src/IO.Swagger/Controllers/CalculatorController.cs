/*
 * Calculator API
 *
 * API for performing arithmetic operations and JWT-based authentication.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using Microsoft.AspNetCore.Mvc;
using BL.Interfaces;
using Microsoft.AspNetCore.Http;
using BL.DTOs;
using CalculatorApi.Attributes;

namespace CalculatorApi.Controllers
{
    /// <summary>
    /// Perform an arithmetic operation 
    /// </summary>
    /// <remarks>Accepts two numbers in the request body and an operation type in the header (X-Operation-Type) to perform the corresponding calculation. Requires JWT authentication.</remarks>
    /// <param name="body"></param>
    /// <param name="xOperationType">The type of operation to perform (add, subtract, multiply, divide)</param>
    /// <response code="200">Operation performed successfully</response>
    /// <response code="400">Bad request (e.g., invalid request body, unsupported operation)</response>
    /// <response code="401">Unauthorized (Missing or invalid Bearer token)</response>
    /// <response code="500">Internal server error</response>    [Route("api/[controller]")]
    [ApiController]

    public class CalculatorController : ControllerBase
    {
        private readonly ICalculatorService _calculatorService;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public CalculatorController(ICalculatorService calculatorService, IHttpContextAccessor httpContextAccessor)
        {
            _calculatorService = calculatorService;
            _httpContextAccessor = httpContextAccessor;
        }

        [CustomAuthorize]
        [HttpPost("calculate")]
        public IActionResult Calculate(
        [FromBody] CalculationsRequest request,
        [FromHeader(Name = "X-Operation-Type")] string operation)
        {
            if (request == null)
            {
                return BadRequest("Invalid request body.");
            }

            try
            {
                var result = _calculatorService.Calculate(request.Num1, request.Num2, operation);
                return Ok(new
                {
                    num1 = request.Num1,
                    num2 = request.Num2,
                    operation,
                    result
                });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
        }

    }
}
